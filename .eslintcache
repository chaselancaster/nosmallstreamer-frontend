[{"/Users/chaselancaster/nss/nss-fe/src/Component/StreamsList/StreamsList.js":"1","/Users/chaselancaster/nss/nss-fe/src/index.js":"2","/Users/chaselancaster/nss/nss-fe/src/Component/StreamCard/StreamCard.js":"3"},{"size":815,"mtime":1610220642642,"results":"4","hashOfConfig":"5"},{"size":500,"mtime":1606345523019,"results":"6","hashOfConfig":"5"},{"size":4212,"mtime":1610220628874,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10"},"1rfj9wn",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},"/Users/chaselancaster/nss/nss-fe/src/Component/StreamsList/StreamsList.js",["17"],"import React, { Component } from \"react\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { ReactComponent as ThumbsUp } from \"./assets/thumbsUp.svg\";\nimport StreamCard from '../StreamCard/StreamCard';\n\nimport \"./StreamsList.css\";\nclass StreamsList extends Component {\n \n  render() {\n    const { streams } = this.props;\n    return (\n      <InfiniteScroll\n        className=\"streams-container\"\n        dataLength={this.props.streams.length}\n        next={this.props.loadMoreStreams}\n        hasMore={true}\n      >\n        {streams.map((stream, index) => {\n          return (\n            <StreamCard doSetCurrentUser={this.props.doSetCurrentUser} currentUser={this.props.currentUser} streamer={stream} />\n          );\n        })}\n      </InfiniteScroll>\n    );\n  }\n}\n\nexport default StreamsList;\n","/Users/chaselancaster/nss/nss-fe/src/index.js",[],["18","19"],"/Users/chaselancaster/nss/nss-fe/src/Component/StreamCard/StreamCard.js",["20","21"],"import React, { Component } from 'react'\nimport { ReactComponent as ThumbsUp } from \"../StreamsList/assets/thumbsUp.svg\";\nimport { ReactComponent as ThumbsDown } from \"../StreamsList/assets/thumbsDown.svg\";\nimport { ReactComponent as PlusCircle } from '../StreamsList/assets/plusCircle.svg';\n\nimport './StreamCard.css';\nclass StreamCard extends Component {\n    state = {\n        width: \"325x\",\n        height: \"225.jpg\",\n        windowWidth: 0,\n        message: ''\n      };\n\n    upvote = 'upvote'\n    downvote = 'downvote'\n\n    imageHandler = (string) => {\n        let array = string.split(\"{\");\n        array[1] = this.state.width;\n        array[2] = this.state.height;\n        let src = array.join(\"\");\n        return src;\n    };\n\n    rateStreamer = async (name, vote, user_id) => {\n        try {\n        this.setState({\n            message: ''\n        })\n        console.log(user_id, '<- user_id')\n        const sendVote = await fetch(`https://pacific-forest-27041.herokuapp.com/leaderboard/submit/${name}/${vote}/${user_id}`, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        }\n        })\n        const parsedSendVote = await sendVote.json()\n        if (parsedSendVote) {\n            this.setState({\n                message: parsedSendVote.message\n                })\n            setTimeout(\n                () => this.setState({ message: '' }), \n                5000\n              );\n        }\n    } catch (err) {\n        // console.log(err, '<- err in rateStreamer')\n    }\n    }\n\n    addToWatchLater = async (name, user_id) => {\n        try {\n            const watchLaterCall = await fetch(`https://pacific-forest-27041.herokuapp.com/users/watchlater/add/${this.props.currentUser._id}/${name}/${user_id}`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            })\n            const parsedWatchLaterCall = await watchLaterCall.json()\n            if (parsedWatchLaterCall) {\n                this.setState({\n                    message: parsedWatchLaterCall.message\n                })\n                setTimeout(\n                    () => this.setState({ message: '' }), \n                    5000\n                );\n                this.props.doSetCurrentUser(parsedWatchLaterCall.user)\n            }\n        } catch (err) {\n        //   console.log(err, '<- err')\n        }\n    }\n\n    render() {\n        const { streamer } = this.props\n        return (\n            <div>\n                    <li key={streamer.id} className=\"stream\">\n                        <img src={this.imageHandler(streamer.thumbnail_url)} />\n                        <div className=\"stream-info\">\n                            <p className=\"stream-user-name\">\n                            {streamer.user_name}\n                            </p>\n                            <p className=\"stream-title\">{streamer.title}</p>\n                            <p>\n                            <span>Viewers: </span>\n                            {streamer.viewer_count}\n                            </p>\n                            <a\n                            href={`https://www.twitch.tv/${streamer.user_name}`}\n                            target=\"_blank\"\n                            >\n                            <button className=\"view-button\">View on Twitch!</button>\n                            </a>\n                            <div className=\"stream-card-buttons\">\n                            <ThumbsUp onClick={() => this.rateStreamer(streamer.user_name, this.upvote, streamer.user_id)} streamName={streamer.user_name} className=\"thumbs-up\"/>\n                            <PlusCircle onClick={() => this.addToWatchLater(streamer.user_name, streamer.user_id)} className=\"plus-circle\"/>\n                            <ThumbsDown onClick={() => this.rateStreamer(streamer.user_name, this.downvote, streamer.user_id)} streamName={streamer.user_name} className=\"thumbs-down\"/>\n                            </div>\n                            <p className=\"state-message\">{this.state.message}</p>\n                        </div>\n                    </li>\n            </div>\n        )\n    }\n}\n\nexport default StreamCard\n",{"ruleId":"22","severity":1,"message":"23","line":3,"column":28,"nodeType":"24","messageId":"25","endLine":3,"endColumn":36},{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","severity":1,"message":"31","line":82,"column":25,"nodeType":"32","endLine":82,"endColumn":80},{"ruleId":"33","severity":1,"message":"34","line":94,"column":29,"nodeType":"35","endLine":94,"endColumn":44},"no-unused-vars","'ThumbsUp' is defined but never used.","Identifier","unusedVar","no-native-reassign",["36"],"no-negated-in-lhs",["37"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","no-global-assign","no-unsafe-negation"]